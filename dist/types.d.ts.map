{"mappings":"AAOA;IACE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS,CAAC;CACnC;AAED;IACE,CAAC,IAAI,EAAE,MAAM,GAAG,QAAQ,GAAG,SAAS,CAAC;CACtC;AAED;IACE,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,QAAQ,CAAC,EAAE,OAAO,CAAC;CACpB;AAMD,6BAA6B,MAAM,CAelC;AAED,0BAA0B,MAAM,CAAC,EAAE,MAAM,GAAG,IAAI,GAAG,IAAI,CAKtD;AAED,+BAA+B,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,EAAE,QAAQ,GAAG,IAAI,CAQ3E;AAED,uCAAuC,MAAM,EAAE,CAE9C;AAED,mCAAmC,MAAM,EAAE,MAAM,GAAG,IAAI,CAIvD;AAED,mBAAmB,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,cAAc,GAAG,MAAM,CA8BnE","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"/**\n * A lightweight internationalization plugin\n *\n * @version 2.0.0\n * @author Charlie LEDUC <contact@pixeliste.fr>\n */\n\nexport interface i18nJSON {\n  [key: string]: string | undefined;\n}\n\nexport interface i18nTranslation {\n  [lang: string]: i18nJSON | undefined;\n}\n\nexport interface i18nParameters {\n  locale?: string;\n  tokens?: any[];\n  count?: number;\n  reversed?: boolean;\n}\n\nconst _I18NT_LOCALE_KEY_: string = \"locale\";\nconst _I18NT_TRANSLATIONS_: i18nTranslation = {};\nconst _I18NT_SUPPORTED_LOCALES_: string[] = [\"en\"];\n\nexport function getLocale(): string {\n  const defaultLocale = _I18NT_SUPPORTED_LOCALES_[0];\n  const storageLocale = localStorage.getItem(_I18NT_LOCALE_KEY_);\n\n  let locale = storageLocale ?? window.navigator.language ?? defaultLocale;\n  if (locale === \"default\") {\n    locale = window.navigator.language;\n  }\n  if (locale.length > 2) {\n    locale = locale.substring(0, 2);\n  }\n\n  return _I18NT_SUPPORTED_LOCALES_.indexOf(locale) > -1\n    ? locale\n    : defaultLocale;\n}\n\nexport function setLocale(locale?: string | null): void {\n  localStorage.removeItem(_I18NT_LOCALE_KEY_);\n  if ((locale ?? \"\").length > 0) {\n    localStorage.setItem(_I18NT_LOCALE_KEY_, locale ?? \"default\");\n  }\n}\n\nexport function addTranslation(locale: string, translation?: i18nJSON): void {\n  if (!(locale ?? \"\").length) {\n    return;\n  }\n  if (_I18NT_SUPPORTED_LOCALES_.indexOf(locale) < 0) {\n    _I18NT_SUPPORTED_LOCALES_.push(locale);\n  }\n  _I18NT_TRANSLATIONS_[locale] = translation;\n}\n\nexport function getSupportedLocales(): string[] {\n  return _I18NT_SUPPORTED_LOCALES_;\n}\n\nexport function addSupportedLocale(locale: string): void {\n  if (_I18NT_SUPPORTED_LOCALES_.indexOf(locale) < 0) {\n    _I18NT_SUPPORTED_LOCALES_.push(locale);\n  }\n}\n\nexport function _t(message: string, params?: i18nParameters): string {\n  const locale = params?.locale ?? getLocale();\n  const translation = _I18NT_TRANSLATIONS_[locale] ?? null;\n  if (!translation) {\n    return message;\n  }\n\n  if (params?.reversed === true) {\n    return (\n      Object.keys(translation).find((key) => translation[key] === message) ??\n      message\n    );\n  }\n\n  const tokens = params?.tokens ?? [];\n  let output: string | null | undefined = translation[message] ?? message ?? \"\";\n  if (output && output?.indexOf(\"|\") > -1) {\n    const count = params?.count ?? 0;\n    const parts = output.split(\"|\");\n    if (parts.length) {\n      output =\n        count < parts.length\n          ? parts[count].trim()\n          : parts[parts.length - 1].trim();\n    }\n  }\n  for (let i = 0; i < tokens.length; i++) {\n    output = output.replace(/%s/u, tokens[i]);\n  }\n  return output;\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}